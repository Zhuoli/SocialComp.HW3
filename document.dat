Help on class Api in twitter:

twitter.Api = class Api(__builtin__.object)
 |  A python interface into the Twitter API
 |  
 |  By default, the Api caches results for 1 minute.
 |  
 |  Example usage:
 |  
 |    To create an instance of the twitter.Api class, with no authentication:
 |  
 |      >>> import twitter
 |      >>> api = twitter.Api()
 |  
 |    To fetch a single user's public status messages, where "user" is either
 |    a Twitter "short name" or their user id.
 |  
 |      >>> statuses = api.GetUserTimeline(user)
 |      >>> print [s.text for s in statuses]
 |  
 |    To use authentication, instantiate the twitter.Api class with a
 |    consumer key and secret; and the oAuth key and secret:
 |  
 |      >>> api = twitter.Api(consumer_key='twitter consumer key',
 |                            consumer_secret='twitter consumer secret',
 |                            access_token_key='the_key_given',
 |                            access_token_secret='the_key_secret')
 |  
 |    To fetch your friends (after being authenticated):
 |  
 |      >>> users = api.GetFriends()
 |      >>> print [u.name for u in users]
 |  
 |    To post a twitter status message (after being authenticated):
 |  
 |      >>> status = api.PostUpdate('I love python-twitter!')
 |      >>> print status.text
 |      I love python-twitter!
 |  
 |    There are many other methods, including:
 |  
 |      >>> api.PostUpdates(status)
 |      >>> api.PostDirectMessage(user, text)
 |      >>> api.GetUser(user)
 |      >>> api.GetReplies()
 |      >>> api.GetUserTimeline(user)
 |      >>> api.GetHomeTimeLine()
 |      >>> api.GetStatus(id)
 |      >>> api.DestroyStatus(id)
 |      >>> api.GetFriends(user)
 |      >>> api.GetFollowers()
 |      >>> api.GetFeatured()
 |      >>> api.GetDirectMessages()
 |      >>> api.GetSentDirectMessages()
 |      >>> api.PostDirectMessage(user, text)
 |      >>> api.DestroyDirectMessage(id)
 |      >>> api.DestroyFriendship(user)
 |      >>> api.CreateFriendship(user)
 |      >>> api.GetUserByEmail(email)
 |      >>> api.VerifyCredentials()
 |  
 |  Methods defined here:
 |  
 |  ClearCredentials(self)
 |      Clear the any credentials for this instance
 |  
 |  CreateFavorite(self, status=None, id=None, include_entities=True)
 |      Favorites the specified status object or id as the authenticating user.
 |      Returns the favorite status when successful.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        id:
 |          The id of the twitter status to mark as a favorite.
 |          [Optional]
 |        status:
 |          The twitter.Status object to mark as a favorite.
 |          [Optional]
 |        include_entities:
 |          The entities node will be omitted when set to False.
 |      Returns:
 |        A twitter.Status instance representing the newly-marked favorite.
 |  
 |  CreateFriendship(self, user_id=None, screen_name=None, follow=True)
 |      Befriends the user specified by the user_id or screen_name.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          A user_id to follow [Optional]
 |        screen_name:
 |          A screen_name to follow [Optional]
 |        follow:
 |          Set to False to disable notifications for the target user
 |      Returns:
 |        A twitter.User instance representing the befriended user.
 |  
 |  CreateList(self, name, mode=None, description=None)
 |      Creates a new list with the give name for the authenticated user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        name:
 |          New name for the list
 |        mode:
 |          'public' or 'private'.
 |          Defaults to 'public'. [Optional]
 |        description:
 |          Description of the list. [Optional]
 |      
 |      Returns:
 |        A twitter.List instance representing the new list
 |  
 |  CreateSubscription(self, owner_screen_name=False, owner_id=False, list_id=None, slug=None)
 |      Creates a subscription to a list by the authenticated user
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        owner_screen_name:
 |          The screen_name of the user who owns the list being requested by a slug.
 |        owner_id:
 |          The user ID of the user who owns the list being requested by a slug.
 |        list_id:
 |          The numerical id of the list.
 |        slug:
 |          You can identify a list by its slug instead of its numerical id. If you
 |          decide to do so, note that you'll also have to specify the list owner
 |          using the owner_id or owner_screen_name parameters.
 |      Returns:
 |        A twitter.List instance representing the list subscribed to
 |  
 |  DestroyDirectMessage(self, id, include_entities=True)
 |      Destroys the direct message specified in the required ID parameter.
 |      
 |      The twitter.Api instance must be authenticated, and the
 |      authenticating user must be the recipient of the specified direct
 |      message.
 |      
 |      Args:
 |        id: The id of the direct message to be destroyed
 |      
 |      Returns:
 |        A twitter.DirectMessage instance representing the message destroyed
 |  
 |  DestroyFavorite(self, status=None, id=None, include_entities=True)
 |      Un-Favorites the specified status object or id as the authenticating user.
 |      Returns the un-favorited status when successful.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        id:
 |          The id of the twitter status to unmark as a favorite.
 |          [Optional]
 |        status:
 |          The twitter.Status object to unmark as a favorite.
 |          [Optional]
 |        include_entities:
 |          The entities node will be omitted when set to False.
 |      Returns:
 |        A twitter.Status instance representing the newly-unmarked favorite.
 |  
 |  DestroyFriendship(self, user_id=None, screen_name=None)
 |      Discontinues friendship with a user_id or screen_name.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          A user_id to unfollow [Optional]
 |        screen_name:
 |          A screen_name to unfollow [Optional]
 |      Returns:
 |        A twitter.User instance representing the discontinued friend.
 |  
 |  DestroyList(self, owner_screen_name=False, owner_id=False, list_id=None, slug=None)
 |      Destroys the list identified by list_id or owner_screen_name/owner_id and
 |      slug.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        owner_screen_name:
 |          The screen_name of the user who owns the list being requested by a slug.
 |        owner_id:
 |          The user ID of the user who owns the list being requested by a slug.
 |        list_id:
 |          The numerical id of the list.
 |        slug:
 |          You can identify a list by its slug instead of its numerical id. If you
 |          decide to do so, note that you'll also have to specify the list owner
 |          using the owner_id or owner_screen_name parameters.
 |      Returns:
 |        A twitter.List instance representing the removed list.
 |  
 |  DestroyStatus(self, id, trim_user=False)
 |      Destroys the status specified by the required ID parameter.
 |      
 |      The twitter.Api instance must be authenticated and the
 |      authenticating user must be the author of the specified status.
 |      
 |      Args:
 |        id:
 |          The numerical ID of the status you're trying to destroy.
 |      
 |      Returns:
 |        A twitter.Status instance representing the destroyed status message
 |  
 |  DestroySubscription(self, owner_screen_name=False, owner_id=False, list_id=None, slug=None)
 |      Destroys the subscription to a list for the authenticated user
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        owner_screen_name:
 |          The screen_name of the user who owns the list being requested by a slug.
 |        owner_id:
 |          The user ID of the user who owns the list being requested by a slug.
 |        list_id:
 |          The numerical id of the list.
 |        slug:
 |          You can identify a list by its slug instead of its numerical id. If you
 |          decide to do so, note that you'll also have to specify the list owner
 |          using the owner_id or owner_screen_name parameters.
 |      Returns:
 |        A twitter.List instance representing the removed list.
 |  
 |  GetAverageSleepTime(self, resources)
 |      Determines the minimum number of seconds that a program must wait
 |      before hitting the server again without exceeding the rate_limit
 |      imposed for the currently authenticated user.
 |      
 |      Returns:
 |        The average seconds that the api must have to sleep
 |  
 |  GetBlocks(self, user_id=None, screen_name=None, cursor=-1, skip_status=False, include_user_entities=False)
 |      Fetch the sequence of twitter.User instances, one for each blocked user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          The twitter id of the user whose friends you are fetching.
 |          If not specified, defaults to the authenticated user. [Optional]
 |        screen_name:
 |          The twitter name of the user whose friends you are fetching.
 |          If not specified, defaults to the authenticated user. [Optional]
 |        cursor:
 |          Should be set to -1 for the initial call and then is used to
 |          control what result page Twitter returns [Optional(ish)]
 |        skip_status:
 |          If True the statuses will not be returned in the user items.
 |          [Optional]
 |        include_user_entities:
 |          When True, the user entities will be included.
 |      
 |      Returns:
 |        A sequence of twitter.User instances, one for each friend
 |  
 |  GetDirectMessages(self, since_id=None, max_id=None, count=None, include_entities=True, skip_status=False)
 |      Returns a list of the direct messages sent to the authenticating user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns results with an ID less than (that is, older than) or
 |          equal to the specified ID. [Optional]
 |        count:
 |          Specifies the number of direct messages to try and retrieve, up to a
 |          maximum of 200. The value of count is best thought of as a limit to the
 |          number of Tweets to return because suspended or deleted content is
 |          removed after the count has been applied. [Optional]
 |        include_entities:
 |          The entities node will not be included when set to False.
 |          [Optional]
 |        skip_status:
 |          When set to True statuses will not be included in the returned user
 |          objects. [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.DirectMessage instances
 |  
 |  GetFavorites(self, user_id=None, screen_name=None, count=None, since_id=None, max_id=None, include_entities=True)
 |      Return a list of Status objects representing favorited tweets.
 |      By default, returns the (up to) 20 most recent tweets for the
 |      authenticated user.
 |      
 |      Args:
 |        user:
 |          The twitter name or id of the user whose favorites you are fetching.
 |          If not specified, defaults to the authenticated user. [Optional]
 |        page:
 |          Specifies the page of results to retrieve.
 |          Note: there are pagination limits. [Optional]
 |  
 |  GetFollowerIDs(self, user_id=None, screen_name=None, cursor=-1, stringify_ids=False, count=None, total_count=None)
 |      Returns a list of twitter user id's for every person
 |      that is following the specified user.
 |      
 |      Args:
 |        user_id:
 |          The id of the user to retrieve the id list for
 |          [Optional]
 |        screen_name:
 |          The screen_name of the user to retrieve the id list for
 |          [Optional]
 |        cursor:
 |          Specifies the Twitter API Cursor location to start at.
 |          Note: there are pagination limits.
 |          [Optional]
 |        stringify_ids:
 |          if True then twitter will return the ids as strings instead of integers.
 |          [Optional]
 |        count:
 |          The number of user id's to retrieve per API request. Please be aware that
 |          this might get you rate-limited if set to a small number. By default Twitter
 |          will retrieve 5000 UIDs per call.
 |          [Optional]
 |        total_count:
 |          The total amount of UIDs to retrieve. Good if the account has many followers
 |          and you don't want to get rate limited. The data returned might contain more
 |          UIDs if total_count is not a multiple of count (5000 by default).
 |          [Optional]
 |      
 |      
 |      Returns:
 |        A list of integers, one for each user id.
 |  
 |  GetFollowers(self, user_id=None, screen_name=None, cursor=-1, skip_status=False, include_user_entities=False)
 |      Fetch the sequence of twitter.User instances, one for each follower
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          The twitter id of the user whose followers you are fetching.
 |          If not specified, defaults to the authenticated user. [Optional]
 |        screen_name:
 |          The twitter name of the user whose followers you are fetching.
 |          If not specified, defaults to the authenticated user. [Optional]
 |        cursor:
 |          Should be set to -1 for the initial call and then is used to
 |          control what result page Twitter returns [Optional(ish)]
 |        skip_status:
 |          If True the statuses will not be returned in the user items.
 |          [Optional]
 |        include_user_entities:
 |          When True, the user entities will be included.
 |      
 |      Returns:
 |        A sequence of twitter.User instances, one for each follower
 |  
 |  GetFriendIDs(self, user_id=None, screen_name=None, cursor=-1, stringify_ids=False, count=None)
 |      Returns a list of twitter user id's for every person
 |      the specified user is following.
 |      
 |      Args:
 |        user_id:
 |          The id of the user to retrieve the id list for
 |          [Optional]
 |        screen_name:
 |          The screen_name of the user to retrieve the id list for
 |          [Optional]
 |        cursor:
 |          Specifies the Twitter API Cursor location to start at.
 |          Note: there are pagination limits.
 |          [Optional]
 |        stringify_ids:
 |          if True then twitter will return the ids as strings instead of integers.
 |          [Optional]
 |        count:
 |          The number of status messages to retrieve. [Optional]
 |      
 |      Returns:
 |        A list of integers, one for each user id.
 |  
 |  GetFriends(self, user_id=None, screen_name=None, cursor=-1, skip_status=False, include_user_entities=False)
 |      Fetch the sequence of twitter.User instances, one for each friend.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          The twitter id of the user whose friends you are fetching.
 |          If not specified, defaults to the authenticated user. [Optional]
 |        screen_name:
 |          The twitter name of the user whose friends you are fetching.
 |          If not specified, defaults to the authenticated user. [Optional]
 |        cursor:
 |          Should be set to -1 for the initial call and then is used to
 |          control what result page Twitter returns [Optional(ish)]
 |        skip_status:
 |          If True the statuses will not be returned in the user items.
 |          [Optional]
 |        include_user_entities:
 |          When True, the user entities will be included.
 |      
 |      Returns:
 |        A sequence of twitter.User instances, one for each friend
 |  
 |  GetHelpConfiguration(self)
 |  
 |  GetHomeTimeline(self, count=None, since_id=None, max_id=None, trim_user=False, exclude_replies=False, contributor_details=False, include_entities=True)
 |      Fetch a collection of the most recent Tweets and retweets posted by the
 |      authenticating user and the users they follow.
 |      
 |      The home timeline is central to how most users interact with the Twitter
 |      service.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        count:
 |          Specifies the number of statuses to retrieve. May not be
 |          greater than 200. Defaults to 20. [Optional]
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns results with an ID less than (that is, older than) or
 |          equal to the specified ID. [Optional]
 |        trim_user:
 |          When True, each tweet returned in a timeline will include a user
 |          object including only the status authors numerical ID. Omit this
 |          parameter to receive the complete user object. [Optional]
 |        exclude_replies:
 |          This parameter will prevent replies from appearing in the
 |          returned timeline. Using exclude_replies with the count
 |          parameter will mean you will receive up-to count tweets -
 |          this is because the count parameter retrieves that many
 |          tweets before filtering out retweets and replies.
 |          [Optional]
 |        contributor_details:
 |          This parameter enhances the contributors element of the
 |          status response to include the screen_name of the contributor.
 |          By default only the user_id of the contributor is included.
 |          [Optional]
 |        include_entities:
 |          The entities node will be disincluded when set to false.
 |          This node offers a variety of metadata about the tweet in a
 |          discreet structure, including: user_mentions, urls, and
 |          hashtags. [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.Status instances, one for each message
 |  
 |  GetListMembers(self, list_id, slug, owner_id=None, owner_screen_name=None, cursor=-1, skip_status=False, include_entities=False)
 |      Fetch the sequence of twitter.User instances, one for each member
 |      of the given list_id or slug.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        list_id:
 |          Specifies the ID of the list to retrieve.
 |        slug:
 |          The slug name for the list to retrieve. If you specify None for the
 |          list_id, then you have to provide either a owner_screen_name or owner_id.
 |        owner_id:
 |          Specifies the ID of the user for whom to return the
 |          list timeline. Helpful for disambiguating when a valid user ID
 |          is also a valid screen name. [Optional]
 |        owner_screen_name:
 |          Specifies the screen name of the user for whom to return the
 |          user_timeline. Helpful for disambiguating when a valid screen
 |          name is also a user ID. [Optional]
 |        cursor:
 |          Should be set to -1 for the initial call and then is used to
 |          control what result page Twitter returns [Optional(ish)]
 |        skip_status:
 |          If True the statuses will not be returned in the user items.
 |          [Optional]
 |        include_entities:
 |          If False, the timeline will not contain additional metadata.
 |          defaults to True. [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.User instances, one for each follower
 |  
 |  GetListTimeline(self, list_id, slug, owner_id=None, owner_screen_name=None, since_id=None, max_id=None, count=None, include_rts=True, include_entities=True)
 |      Fetch the sequence of Status messages for a given list id.
 |      
 |      The twitter.Api instance must be authenticated if the user is private.
 |      
 |      Args:
 |        list_id:
 |          Specifies the ID of the list to retrieve.
 |        slug:
 |          The slug name for the list to retrieve. If you specify None for the
 |          list_id, then you have to provide either a owner_screen_name or owner_id.
 |        owner_id:
 |          Specifies the ID of the user for whom to return the
 |          list timeline. Helpful for disambiguating when a valid user ID
 |          is also a valid screen name. [Optional]
 |        owner_screen_name:
 |          Specifies the screen name of the user for whom to return the
 |          user_timeline. Helpful for disambiguating when a valid screen
 |          name is also a user ID. [Optional]
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns only statuses with an ID less than (that is, older
 |          than) or equal to the specified ID. [Optional]
 |        count:
 |          Specifies the number of statuses to retrieve. May not be
 |          greater than 200.  [Optional]
 |        include_rts:
 |          If True, the timeline will contain native retweets (if they
 |          exist) in addition to the standard stream of tweets. [Optional]
 |        include_entities:
 |          If False, the timeline will not contain additional metadata.
 |          defaults to True. [Optional]
 |      
 |      Returns:
 |        A sequence of Status instances, one for each message up to count
 |  
 |  GetLists(self, user_id=None, screen_name=None, count=None, cursor=-1)
 |      Fetch the sequence of lists for a user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          The ID of the user for whom to return results for. [Optional]
 |        screen_name:
 |          The screen name of the user for whom to return results for.
 |          [Optional]
 |        count:
 |          The amount of results to return per page. Defaults to 20. No more than
 |          1000 results will ever be returned in a single page.
 |          [Optional]
 |        cursor:
 |          "page" value that Twitter will use to start building the
 |          list sequence from.  -1 to start at the beginning.
 |          Twitter will return in the result the values for next_cursor
 |          and previous_cursor. [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.List instances, one for each list
 |  
 |  GetListsList(self, screen_name, user_id=None, reverse=False)
 |      Returns a single status message, specified by the id parameter.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        screen_name:
 |          Specifies the screen name of the user for whom to return the
 |          user_timeline. Helpful for disambiguating when a valid screen
 |          name is also a user ID.
 |        user_id:
 |          Specifies the ID of the user for whom to return the
 |          user_timeline. Helpful for disambiguating when a valid user ID
 |          is also a valid screen name. [Optional]
 |        reverse:
 |          If False, the owned lists will be returned first, othewise subscribed
 |          lists will be at the top. Returns a maximum of 100 entries regardless.
 |          Defaults to False. [Optional]
 |      Returns:
 |        A list of twitter List items.
 |  
 |  GetMentions(self, count=None, since_id=None, max_id=None, trim_user=False, contributor_details=False, include_entities=True)
 |      Returns the 20 most recent mentions (status containing @screen_name)
 |      for the authenticating user.
 |      
 |      Args:
 |        count:
 |          Specifies the number of tweets to try and retrieve, up to a maximum of
 |          200. The value of count is best thought of as a limit to the number of
 |          tweets to return because suspended or deleted content is removed after
 |          the count has been applied. [Optional]
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns only statuses with an ID less than
 |          (that is, older than) the specified ID.  [Optional]
 |        trim_user:
 |          When set to True, each tweet returned in a timeline will include a user
 |          object including only the status authors numerical ID. Omit this
 |          parameter to receive the complete user object.
 |        contributor_details:
 |          If set to True, this parameter enhances the contributors element of the
 |          status response to include the screen_name of the contributor. By
 |          default only the user_id of the contributor is included.
 |        include_entities:
 |          The entities node will be disincluded when set to False.
 |      
 |      Returns:
 |        A sequence of twitter.Status instances, one for each mention of the user.
 |  
 |  GetRateLimitStatus(self, resource_families=None)
 |      Fetch the rate limit status for the currently authorized user.
 |      
 |      Args:
 |        resources:
 |          A comma seperated list of resource families you want to know the current
 |          rate limit disposition of.
 |          [Optional]
 |      
 |      Returns:
 |        A dictionary containing the time the limit will reset (reset_time),
 |        the number of remaining hits allowed before the reset (remaining_hits),
 |        the number of hits allowed in a 60-minute period (hourly_limit), and
 |        the time of the reset in seconds since The Epoch (reset_time_in_seconds).
 |  
 |  GetReplies(self, since_id=None, count=None, max_id=None, trim_user=False)
 |      Get a sequence of status messages representing the 20 most
 |      recent replies (status updates prefixed with @twitterID) to the
 |      authenticating user.
 |      
 |      Args:
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns results with an ID less than (that is, older than) or
 |          equal to the specified ID. [Optional]
 |        trim_user:
 |          If True the returned payload will only contain the user IDs,
 |          otherwise the payload will contain the full user data item.
 |          [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.Status instances, one for each reply to the user.
 |  
 |  GetRetweeters(self, status_id, cursor=None, stringify_ids=None)
 |      Returns a collection of up to 100 user IDs belonging to
 |      users who have retweeted the tweet specified by the id parameter.
 |      
 |      Args:
 |        status_id:
 |          the tweet's numerical ID
 |        cursor:
 |          breaks the ids into pages of no more than 100.
 |          [Semi-Optional]
 |        stringify_ids:
 |          returns the IDs as unicode strings [Optional]
 |      
 |      Returns:
 |        A list of user IDs
 |  
 |  GetRetweets(self, statusid, count=None, trim_user=False)
 |      Returns up to 100 of the first retweets of the tweet identified
 |      by statusid
 |      
 |      Args:
 |        statusid:
 |          The ID of the tweet for which retweets should be searched for
 |        count:
 |          The number of status messages to retrieve. [Optional]
 |        trim_user:
 |          If True the returned payload will only contain the user IDs,
 |          otherwise the payload will contain the full user data item.
 |          [Optional]
 |      
 |      Returns:
 |        A list of twitter.Status instances, which are retweets of statusid
 |  
 |  GetRetweetsOfMe(self, count=None, since_id=None, max_id=None, trim_user=False, include_entities=True, include_user_entities=True)
 |      Returns up to 100 of the most recent tweets of the user that have been
 |      retweeted by others.
 |      
 |      Args:
 |        count:
 |          The number of retweets to retrieve, up to 100. If omitted, 20 is
 |          assumed.
 |        since_id:
 |          Returns results with an ID greater than (newer than) this ID.
 |        max_id:
 |          Returns results with an ID less than or equal to this ID.
 |        trim_user:
 |          When True, the user object for each tweet will only be an ID.
 |        include_entities:
 |          When True, the tweet entities will be included.
 |        include_user_entities:
 |          When True, the user entities will be included.
 |  
 |  GetSearch(self, term=None, geocode=None, since_id=None, max_id=None, until=None, count=15, lang=None, locale=None, result_type='mixed', include_entities=None)
 |      Return twitter search results for a given term.
 |      
 |      Args:
 |        term:
 |          Term to search by. Optional if you include geocode.
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns only statuses with an ID less than (that is, older
 |          than) or equal to the specified ID. [Optional]
 |        until:
 |          Returns tweets generated before the given date. Date should be
 |          formatted as YYYY-MM-DD. [Optional]
 |        geocode:
 |          Geolocation information in the form (latitude, longitude, radius)
 |          [Optional]
 |        count:
 |          Number of results to return.  Default is 15 [Optional]
 |        lang:
 |          Language for results as ISO 639-1 code.  Default is None (all languages)
 |          [Optional]
 |        locale:
 |          Language of the search query. Currently only 'ja' is effective. This is
 |          intended for language-specific consumers and the default should work in
 |          the majority of cases.
 |        result_type:
 |          Type of result which should be returned.  Default is "mixed".  Other
 |          valid options are "recent" and "popular". [Optional]
 |        include_entities:
 |          If True, each tweet will include a node called "entities,".
 |          This node offers a variety of metadata about the tweet in a
 |          discrete structure, including: user_mentions, urls, and
 |          hashtags. [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.Status instances, one for each message containing
 |        the term
 |  
 |  GetSentDirectMessages(self, since_id=None, max_id=None, count=None, page=None, include_entities=True)
 |      Returns a list of the direct messages sent by the authenticating user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occured since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns results with an ID less than (that is, older than) or
 |          equal to the specified ID. [Optional]
 |        count:
 |          Specifies the number of direct messages to try and retrieve, up to a
 |          maximum of 200. The value of count is best thought of as a limit to the
 |          number of Tweets to return because suspended or deleted content is
 |          removed after the count has been applied. [Optional]
 |        page:
 |          Specifies the page of results to retrieve.
 |          Note: there are pagination limits. [Optional]
 |        include_entities:
 |          The entities node will not be included when set to False.
 |          [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.DirectMessage instances
 |  
 |  GetShortUrlLength(self, https=False)
 |  
 |  GetSleepTime(self, resources)
 |      Determines the minimum number of seconds that a program must wait
 |      before hitting the server again without exceeding the rate_limit
 |      imposed for the currently authenticated user.
 |      
 |      Returns:
 |        The minimum seconds that the api must have to sleep before query again
 |  
 |  GetStatus(self, id, trim_user=False, include_my_retweet=True, include_entities=True)
 |      Returns a single status message, specified by the id parameter.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        id:
 |          The numeric ID of the status you are trying to retrieve.
 |        trim_user:
 |          When set to True, each tweet returned in a timeline will include
 |          a user object including only the status authors numerical ID.
 |          Omit this parameter to receive the complete user object.
 |          [Optional]
 |        include_my_retweet:
 |          When set to True, any Tweets returned that have been retweeted by
 |          the authenticating user will include an additional
 |          current_user_retweet node, containing the ID of the source status
 |          for the retweet. [Optional]
 |        include_entities:
 |          If False, the entities node will be disincluded.
 |          This node offers a variety of metadata about the tweet in a
 |          discreet structure, including: user_mentions, urls, and
 |          hashtags. [Optional]
 |      Returns:
 |        A twitter.Status instance representing that status message
 |  
 |  GetStatusOembed(self, id=None, url=None, maxwidth=None, hide_media=False, hide_thread=False, omit_script=False, align=None, related=None, lang=None)
 |      Returns information allowing the creation of an embedded representation of a
 |      Tweet on third party sites.
 |      Specify tweet by the id or url parameter.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        id:
 |          The numeric ID of the status you are trying to embed.
 |        url:
 |          The url of the status you are trying to embed.
 |        maxwidth:
 |          The maximum width in pixels that the embed should be rendered at.
 |          This value is constrained to be between 250 and 550 pixels. [Optional]
 |        hide_media:
 |          Specifies whether the embedded Tweet should automatically expand images. [Optional]
 |        hide_thread:
 |          Specifies whether the embedded Tweet should automatically show the original
 |          message in the case that the embedded Tweet is a reply. [Optional]
 |        omit_script:
 |          Specifies whether the embedded Tweet HTML should include a <script>
 |          element pointing to widgets.js. [Optional]
 |        align:
 |          Specifies whether the embedded Tweet should be left aligned, right aligned,
 |          or centered in the page. [Optional]
 |        related:
 |          A comma sperated string of related screen names. [Optional]
 |        lang:
 |          Language code for the rendered embed. [Optional]
 |      
 |      Returns:
 |        A dictionary with the response.
 |  
 |  GetStreamSample(self, delimited=None, stall_warnings=None)
 |      Returns a small sample of public statuses
 |      
 |      args:
 |        delimited:      specifies a message length            [optional]
 |        stall_warnings: set to True to deliver stall warnings [optional]
 |      
 |      returns:
 |        a twitter stream
 |  
 |  GetSubscriptions(self, user_id=None, screen_name=None, count=20, cursor=-1)
 |      Obtain a collection of the lists the specified user is subscribed to, 20
 |      lists per page by default. Does not include the user's own lists.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          The ID of the user for whom to return results for. [Optional]
 |        screen_name:
 |          The screen name of the user for whom to return results for.
 |          [Optional]
 |        count:
 |         The amount of results to return per page. Defaults to 20.
 |         No more than 1000 results will ever be returned in a single page.
 |        cursor:
 |          "page" value that Twitter will use to start building the
 |          list sequence from.  -1 to start at the beginning.
 |          Twitter will return in the result the values for next_cursor
 |          and previous_cursor. [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.List instances, one for each list
 |  
 |  GetTrendsCurrent(self, exclude=None)
 |      Get the current top trending topics (global)
 |      
 |      Args:
 |        exclude:
 |          Appends the exclude parameter as a request parameter.
 |          Currently only exclude=hashtags is supported. [Optional]
 |      
 |      Returns:
 |        A list with 10 entries. Each entry contains a trend.
 |  
 |  GetTrendsWoeid(self, id, exclude=None)
 |      Return the top 10 trending topics for a specific WOEID, if trending
 |      information is available for it.
 |      
 |      Args:
 |        woeid:
 |          the Yahoo! Where On Earth ID for a location.
 |        exclude:
 |          Appends the exclude parameter as a request parameter.
 |          Currently only exclude=hashtags is supported. [Optional]
 |      
 |      Returns:
 |        A list with 10 entries. Each entry contains a trend.
 |  
 |  GetUser(self, user_id=None, screen_name=None, include_entities=True)
 |      Returns a single user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          The id of the user to retrieve.
 |          [Optional]
 |        screen_name:
 |          The screen name of the user for whom to return results for. Either a
 |          user_id or screen_name is required for this method.
 |          [Optional]
 |        include_entities:
 |          if set to False, the 'entities' node will not be included.
 |          [Optional]
 |      
 |      
 |      Returns:
 |        A twitter.User instance representing that user
 |  
 |  GetUserRetweets(self, count=None, since_id=None, max_id=None, trim_user=False)
 |      Fetch the sequence of retweets made by the authenticated user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        count:
 |          The number of status messages to retrieve. [Optional]
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns results with an ID less than (that is, older than) or
 |          equal to the specified ID. [Optional]
 |        trim_user:
 |          If True the returned payload will only contain the user IDs,
 |          otherwise the payload will contain the full user data item.
 |          [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.Status instances, one for each message up to count
 |  
 |  GetUserTimeline(self, user_id=None, screen_name=None, since_id=None, max_id=None, count=None, include_rts=True, trim_user=None, exclude_replies=None)
 |      Fetch the sequence of public Status messages for a single user.
 |      
 |      The twitter.Api instance must be authenticated if the user is private.
 |      
 |      Args:
 |        user_id:
 |          Specifies the ID of the user for whom to return the
 |          user_timeline. Helpful for disambiguating when a valid user ID
 |          is also a valid screen name. [Optional]
 |        screen_name:
 |          Specifies the screen name of the user for whom to return the
 |          user_timeline. Helpful for disambiguating when a valid screen
 |          name is also a user ID. [Optional]
 |        since_id:
 |          Returns results with an ID greater than (that is, more recent
 |          than) the specified ID. There are limits to the number of
 |          Tweets which can be accessed through the API. If the limit of
 |          Tweets has occurred since the since_id, the since_id will be
 |          forced to the oldest ID available. [Optional]
 |        max_id:
 |          Returns only statuses with an ID less than (that is, older
 |          than) or equal to the specified ID. [Optional]
 |        count:
 |          Specifies the number of statuses to retrieve. May not be
 |          greater than 200.  [Optional]
 |        include_rts:
 |          If True, the timeline will contain native retweets (if they
 |          exist) in addition to the standard stream of tweets. [Optional]
 |        trim_user:
 |          If True, statuses will only contain the numerical user ID only.
 |          Otherwise a full user object will be returned for each status.
 |          [Optional]
 |        exclude_replies:
 |          If True, this will prevent replies from appearing in the returned
 |          timeline. Using exclude_replies with the count parameter will mean you
 |          will receive up-to count tweets - this is because the count parameter
 |          retrieves that many tweets before filtering out retweets and replies.
 |          This parameter is only supported for JSON and XML responses. [Optional]
 |      
 |      Returns:
 |        A sequence of Status instances, one for each message up to count
 |  
 |  GetUsersSearch(self, term=None, page=1, count=20, include_entities=None)
 |      Return twitter user search results for a given term.
 |      
 |      Args:
 |        term:
 |          Term to search by.
 |        page:
 |          Page of results to return. Default is 1
 |          [Optional]
 |        count:
 |          Number of results to return.  Default is 20
 |          [Optional]
 |        include_entities:
 |          If True, each tweet will include a node called "entities,".
 |          This node offers a variety of metadata about the tweet in a
 |          discrete structure, including: user_mentions, urls, and hashtags.
 |          [Optional]
 |      
 |      Returns:
 |        A sequence of twitter.User instances, one for each message containing
 |        the term
 |  
 |  PostDirectMessage(self, text, user_id=None, screen_name=None)
 |      Post a twitter direct message from the authenticated user
 |      
 |      The twitter.Api instance must be authenticated. user_id or screen_name
 |      must be specified.
 |      
 |      Args:
 |        text: The message text to be posted.  Must be less than 140 characters.
 |        user_id:
 |          The ID of the user who should receive the direct message.
 |          [Optional]
 |        screen_name:
 |          The screen name of the user who should receive the direct message.
 |          [Optional]
 |      
 |      Returns:
 |        A twitter.DirectMessage instance representing the message posted
 |  
 |  PostMedia(self, status, media, possibly_sensitive=None, in_reply_to_status_id=None, latitude=None, longitude=None, place_id=None, display_coordinates=False)
 |      Post a twitter status message from the authenticated user with a
 |      picture attached.
 |      
 |      Args:
 |        status:
 |            the text of your update
 |        media:
 |            location of media(PNG, JPG, GIF)
 |        possibly_sensitive:
 |            set true is content is "advanced"
 |        in_reply_to_status_id:
 |            ID of a status that this is in reply to
 |        lat:
 |            location in latitude
 |        long:
 |            location in longitude
 |        place_id:
 |            A place in the world identified by a Twitter place ID
 |        display_coordinates:
 |            Set true if you want to display coordinates
 |      
 |        Returns:
 |            A twitter.Status instance representing the message posted.
 |  
 |  PostRetweet(self, original_id, trim_user=False)
 |      Retweet a tweet with the Retweet API.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        original_id:
 |          The numerical id of the tweet that will be retweeted
 |        trim_user:
 |          If True the returned payload will only contain the user IDs,
 |          otherwise the payload will contain the full user data item.
 |          [Optional]
 |      
 |      Returns:
 |        A twitter.Status instance representing the original tweet with retweet details embedded.
 |  
 |  PostUpdate(self, status, in_reply_to_status_id=None, latitude=None, longitude=None, place_id=None, display_coordinates=False, trim_user=False)
 |      Post a twitter status message from the authenticated user.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      https://dev.twitter.com/docs/api/1.1/post/statuses/update
 |      
 |      Args:
 |        status:
 |          The message text to be posted.
 |          Must be less than or equal to 140 characters.
 |        in_reply_to_status_id:
 |          The ID of an existing status that the status to be posted is
 |          in reply to.  This implicitly sets the in_reply_to_user_id
 |          attribute of the resulting status to the user ID of the
 |          message being replied to.  Invalid/missing status IDs will be
 |          ignored. [Optional]
 |        latitude:
 |          Latitude coordinate of the tweet in degrees. Will only work
 |          in conjunction with longitude argument. Both longitude and
 |          latitude will be ignored by twitter if the user has a false
 |          geo_enabled setting. [Optional]
 |        longitude:
 |          Longitude coordinate of the tweet in degrees. Will only work
 |          in conjunction with latitude argument. Both longitude and
 |          latitude will be ignored by twitter if the user has a false
 |          geo_enabled setting. [Optional]
 |        place_id:
 |          A place in the world. These IDs can be retrieved from
 |          GET geo/reverse_geocode. [Optional]
 |        display_coordinates:
 |          Whether or not to put a pin on the exact coordinates a tweet
 |          has been sent from. [Optional]
 |        trim_user:
 |          If True the returned payload will only contain the user IDs,
 |          otherwise the payload will contain the full user data item.
 |          [Optional]
 |      Returns:
 |        A twitter.Status instance representing the message posted.
 |  
 |  PostUpdates(self, status, continuation=None, **kwargs)
 |      Post one or more twitter status messages from the authenticated user.
 |      
 |      Unlike api.PostUpdate, this method will post multiple status updates
 |      if the message is longer than 140 characters.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        status:
 |          The message text to be posted.
 |          May be longer than 140 characters.
 |        continuation:
 |          The character string, if any, to be appended to all but the
 |          last message.  Note that Twitter strips trailing '...' strings
 |          from messages.  Consider using the unicode \u2026 character
 |          (horizontal ellipsis) instead. [Defaults to None]
 |        **kwargs:
 |          See api.PostUpdate for a list of accepted parameters.
 |      
 |      Returns:
 |        A of list twitter.Status instance representing the messages posted.
 |  
 |  SetCache(self, cache)
 |      Override the default cache.  Set to None to prevent caching.
 |      
 |      Args:
 |        cache:
 |          An instance that supports the same API as the twitter._FileCache
 |  
 |  SetCacheTimeout(self, cache_timeout)
 |      Override the default cache timeout.
 |      
 |      Args:
 |        cache_timeout:
 |          Time, in seconds, that responses should be reused.
 |  
 |  SetCredentials(self, consumer_key, consumer_secret, access_token_key=None, access_token_secret=None)
 |      Set the consumer_key and consumer_secret for this instance
 |      
 |      Args:
 |        consumer_key:
 |          The consumer_key of the twitter account.
 |        consumer_secret:
 |          The consumer_secret for the twitter account.
 |        access_token_key:
 |          The oAuth access token key value you retrieved
 |          from running get_access_token.py.
 |        access_token_secret:
 |          The oAuth access token's secret, also retrieved
 |          from the get_access_token.py run.
 |  
 |  SetSource(self, source)
 |      Suggest the "from source" value to be displayed on the Twitter web site.
 |      
 |      The value of the 'source' parameter must be first recognized by
 |      the Twitter server.  New source values are authorized on a case by
 |      case basis by the Twitter development team.
 |      
 |      Args:
 |        source:
 |          The source name as a string.  Will be sent to the server as
 |          the 'source' parameter.
 |  
 |  SetUrllib(self, urllib)
 |      Override the default urllib implementation.
 |      
 |      Args:
 |        urllib:
 |          An instance that supports the same API as the urllib2 module
 |  
 |  SetUserAgent(self, user_agent)
 |      Override the default user agent
 |      
 |      Args:
 |        user_agent:
 |          A string that should be send to the server as the User-agent
 |  
 |  SetXTwitterHeaders(self, client, url, version)
 |      Set the X-Twitter HTTP headers that will be sent to the server.
 |      
 |      Args:
 |        client:
 |           The client name as a string.  Will be sent to the server as
 |           the 'X-Twitter-Client' header.
 |        url:
 |           The URL of the meta.xml as a string.  Will be sent to the server
 |           as the 'X-Twitter-Client-URL' header.
 |        version:
 |           The client version as a string.  Will be sent to the server
 |           as the 'X-Twitter-Client-Version' header.
 |  
 |  UsersLookup(self, user_id=None, screen_name=None, users=None, include_entities=True)
 |      Fetch extended information for the specified users.
 |      
 |      Users may be specified either as lists of either user_ids,
 |      screen_names, or twitter.User objects. The list of users that
 |      are queried is the union of all specified parameters.
 |      
 |      The twitter.Api instance must be authenticated.
 |      
 |      Args:
 |        user_id:
 |          A list of user_ids to retrieve extended information.
 |          [Optional]
 |        screen_name:
 |          A list of screen_names to retrieve extended information.
 |          [Optional]
 |        users:
 |          A list of twitter.User objects to retrieve extended information.
 |          [Optional]
 |        include_entities:
 |          The entities node that may appear within embedded statuses will be
 |          disincluded when set to False.
 |          [Optional]
 |      
 |      Returns:
 |        A list of twitter.User objects for the requested users
 |  
 |  VerifyCredentials(self)
 |      Returns a twitter.User instance if the authenticating user is valid.
 |      
 |      Returns:
 |        A twitter.User instance representing that user if the
 |        credentials are valid, None otherwise.
 |  
 |  __init__(self, consumer_key=None, consumer_secret=None, access_token_key=None, access_token_secret=None, input_encoding=None, request_headers=None, cache=<object object>, shortner=None, base_url=None, stream_url=None, use_gzip_compression=False, debugHTTP=False, requests_timeout=None)
 |      Instantiate a new twitter.Api object.
 |      
 |      Args:
 |        consumer_key:
 |          Your Twitter user's consumer_key.
 |        consumer_secret:
 |          Your Twitter user's consumer_secret.
 |        access_token_key:
 |          The oAuth access token key value you retrieved
 |          from running get_access_token.py.
 |        access_token_secret:
 |          The oAuth access token's secret, also retrieved
 |          from the get_access_token.py run.
 |        input_encoding:
 |          The encoding used to encode input strings. [Optional]
 |        request_header:
 |          A dictionary of additional HTTP request headers. [Optional]
 |        cache:
 |          The cache instance to use. Defaults to DEFAULT_CACHE.
 |          Use None to disable caching. [Optional]
 |        shortner:
 |          The shortner instance to use.  Defaults to None.
 |          See shorten_url.py for an example shortner. [Optional]
 |        base_url:
 |          The base URL to use to contact the Twitter API.
 |          Defaults to https://api.twitter.com. [Optional]
 |        use_gzip_compression:
 |          Set to True to tell enable gzip compression for any call
 |          made to Twitter.  Defaults to False. [Optional]
 |        debugHTTP:
 |          Set to True to enable debug output from urllib2 when performing
 |          any HTTP requests.  Defaults to False. [Optional]
 |        requests_timeout:
 |          Set timeout (in seconds) of the http/https requests. If None the
 |          requests lib default will be used.  Defaults to None. [Optional]
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  DEFAULT_CACHE_TIMEOUT = 60

